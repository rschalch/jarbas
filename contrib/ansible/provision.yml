---
- hosts: virtualbox
  become: true
  vars_files:
    - vars.yml

  tasks:

  # User settings
  
  - name: Create user.
    user:
      name: "{{ deploy_user }}"
      state: present

  - name: Authorize my key on remote host.
    authorized_key:
      user: "{{ deploy_user }}"
      key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
    become: yes

  - name: Update system.
    apt:
      update_cache: yes

  - name: Upgrade system.
    apt:
      upgrade: dist

  # System packages
  
  - name: Install required system packages.
    apt:
      pkg: "{{ item }}"
      state: installed 
      update_cache: yes
      allow_unauthenticated: yes
    with_items:
      - build-essential
      - git
      - liblzma-dev
      - libpq-dev
      - nginx
      - postgresql
      - postgresql-contrib
      - python
      - python-dev
      - python-pip
      - python-psycopg2
      - python3
      - python3-dev
      - python3-venv
      - supervisor

  - name: Update pip.
    pip:
      name: pip
      extra_args: '-U'

  # Install Node 6

  - name: Download Node 6 pre-install script.
    get_url:
      url: https://deb.nodesource.com/setup_6.x
      dest: /tmp/
      mode: 0755

  - name: Run Node 6 pre-install script.
    shell: /tmp/setup_6.x

  - name: Install Node 6.
    apt:
      pkg: nodejs
      state: installed 
      update_cache: yes
      allow_unauthenticated: yes

  # Add SSH credentials (for GitHub)

  - name: Create ssh directory to root user.
    file: path=/root/.ssh state=directory owner=root group=root mode=0700

  - name: Upload SSH key private root.
    copy: src={{ private_key_github }} dest=/root/.ssh/id_rsa mode=0400

  - name: Upload SSH key public root.
    copy: src={{ public_key_github }} dest=/root/.ssh/id_rsa.pub mode=0644

  # Create a virtualenv

  - name: Create virtualenv
    shell: /usr/bin/python3.5 -m venv {{ virtualenv_directory }}

  # Create database.

  - name: Ensure the PostgreSQL is running.
    service:
      name: postgresql
      state: started
      enabled: yes

  - name: Create database.
    become_user: postgres
    postgresql_db:
      name: "{{ project_name }}"
      state: present

  - name: Create database user.
    become_user: postgres
    postgresql_user:
      db: "{{ project_name }}"
      name: "{{ project_name }}"
      password: "{{ database_password }}"
      priv: All
      state: present

  - name: Ensure user does not have unnecessary privileges
    become_user: postgres
    postgresql_user:
      name: "{{ project_name }}"
      role_attr_flags: NOSUPERUSER,NOCREATEDB
      state: present

  # Config nginx

  - name: Find default configurations of nginx sites-enabled.
    find: paths="/etc/nginx/sites-enabled"
    register: result

  - name: Remove files from sites-enabled of nginx.
    file: path={{ item.path }} state=absent
    with_items: 
      - "{{ result.files }}"

  - name: Upload nginx configuration file to sites-available.
    copy: src=nginx.conf dest=/etc/nginx/sites-available/{{ project_name }}.conf

  - name: Upload nginx configuration file to sites-enabled.
    copy: src=nginx.conf dest=/etc/nginx/sites-enabled/{{ project_name }}.conf

  # Config gunicorn via supervisor

  - name: Enable supervisor on start.
    shell: update-rc.d supervisor defaults && update-rc.d supervisor enable

  - name: Create supervisor gunicorn configuration file.
    copy: src=gunicorn.conf dest=/etc/supervisor/conf.d/{{ project_name }}_gunicorn.conf

- include: deploy.yml
- include: seed.yml
